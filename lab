using System;
using System.Diagnostics;
using System.Linq;
using System.Windows.Forms;

class SortAlgorithmForm : Form
{
    private int[] numbers; // Tablica przechowująca liczby
    private Stopwatch stopwatch; // Do mierzenia czasu wykonania
    private Random random = new Random();

    private CheckBox checkBoxGenerateNumbers;
    private NumericUpDown numericUpDownMax;
    private TextBox textBoxInput;
    private TextBox textBoxOutput;
    private Label labelTime;
    private Button buttonBubbleSort;
    private Button buttonSelectionSort;
    private Button buttonInsertionSort;
    private Button buttonMergeSort;
    private Button buttonQuickSort;
    private Button generateButton;

    public SortAlgorithmForm()
    {
        InitializeComponent();
        numbers = new int[0];
    }


    private void InitializeComponent()
        {
            this.checkBoxGenerateNumbers = new System.Windows.Forms.CheckBox();
            this.numericUpDownMax = new System.Windows.Forms.NumericUpDown();
            this.textBoxInput = new System.Windows.Forms.TextBox();
            this.textBoxOutput = new System.Windows.Forms.TextBox();
            this.labelTime = new System.Windows.Forms.Label();
            this.buttonBubbleSort = new System.Windows.Forms.Button();
            this.buttonSelectionSort = new System.Windows.Forms.Button();
            this.buttonInsertionSort = new System.Windows.Forms.Button();
            this.buttonMergeSort = new System.Windows.Forms.Button();
            this.buttonQuickSort = new System.Windows.Forms.Button();
            this.generateButton = new System.Windows.Forms.Button();

            this.buttonBubbleSort.Click += new System.EventHandler(this.MethodButton_Click);
            this.buttonSelectionSort.Click += new System.EventHandler(this.MethodButton_Click);
            this.buttonInsertionSort.Click += new System.EventHandler(this.MethodButton_Click);
            this.buttonMergeSort.Click += new System.EventHandler(this.MethodButton_Click);
            this.buttonQuickSort.Click += new System.EventHandler(this.MethodButton_Click);
            this.generateButton.Click += new System.EventHandler(this.MethodButton_Click);

            ((System.ComponentModel.ISupportInitialize)(this.numericUpDownMax)).BeginInit();
            this.SuspendLayout();
            // 
            // checkBoxGenerateNumbers
            // 
            this.checkBoxGenerateNumbers.Location = new System.Drawing.Point(212, 26);
            this.checkBoxGenerateNumbers.Name = "checkBoxGenerateNumbers";
            this.checkBoxGenerateNumbers.Size = new System.Drawing.Size(104, 24);
            this.checkBoxGenerateNumbers.TabIndex = 0;
            this.checkBoxGenerateNumbers.Text = "Generate Random Numbers";
            // 
            // numericUpDownMax
            // 
            this.numericUpDownMax.Location = new System.Drawing.Point(322, 26);
            this.numericUpDownMax.Maximum = new decimal(new int[] {2000000,0,0,0});
            this.numericUpDownMax.Minimum = new decimal(new int[] {1,0,0,0});
            this.numericUpDownMax.Name = "numericUpDownMax";
            this.numericUpDownMax.Size = new System.Drawing.Size(120, 20);
            this.numericUpDownMax.TabIndex = 1;
            this.numericUpDownMax.Value = new decimal(new int[] {1,0,0,0});
            // 
            // textBoxInput
            // 
            this.textBoxInput.Location = new System.Drawing.Point(5, 26);
            this.textBoxInput.Multiline = true;
            this.textBoxInput.Name = "textBoxInput";
            this.textBoxInput.Size = new System.Drawing.Size(200, 50);
            this.textBoxInput.TabIndex = 2;
            // 
            // textBoxOutput
            // 
            this.textBoxOutput.Location = new System.Drawing.Point(10, 140);
            this.textBoxOutput.Multiline = true;
            this.textBoxOutput.Name = "textBoxOutput";
            this.textBoxOutput.ReadOnly = true;
            this.textBoxOutput.Size = new System.Drawing.Size(200, 50);
            this.textBoxOutput.TabIndex = 3;
            // 
            // labelTime
            // 
            this.labelTime.Location = new System.Drawing.Point(319, 140);
            this.labelTime.Name = "labelTime";
            this.labelTime.Size = new System.Drawing.Size(100, 23);
            this.labelTime.TabIndex = 4;
            this.labelTime.Text = "Czas wykonania: ";
            // 
            // buttonBubbleSort
            // 
            this.buttonBubbleSort.Location = new System.Drawing.Point(10, 240);
            this.buttonBubbleSort.Name = "buttonBubbleSort";
            this.buttonBubbleSort.Size = new System.Drawing.Size(104, 24);
            this.buttonBubbleSort.TabIndex = 5;
            this.buttonBubbleSort.Text = "Bubble Sort";
            // 
            // buttonSelectionSort
            // 
            this.buttonSelectionSort.Location = new System.Drawing.Point(120, 240);
            this.buttonSelectionSort.Name = "buttonSelectionSort";
            this.buttonSelectionSort.Size = new System.Drawing.Size(104, 24);
            this.buttonSelectionSort.TabIndex = 6;
            this.buttonSelectionSort.Text = "Selection Sort";
            // 
            // buttonInsertionSort
            // 
            this.buttonInsertionSort.Location = new System.Drawing.Point(230, 240);
            this.buttonInsertionSort.Name = "buttonInsertionSort";
            this.buttonInsertionSort.Size = new System.Drawing.Size(104, 24);
            this.buttonInsertionSort.TabIndex = 7;
            this.buttonInsertionSort.Text = "Insertion Sort";
            // 
            // buttonMergeSort
            // 
            this.buttonMergeSort.Location = new System.Drawing.Point(338, 240);
            this.buttonMergeSort.Name = "buttonMergeSort";
            this.buttonMergeSort.Size = new System.Drawing.Size(104, 24);
            this.buttonMergeSort.TabIndex = 8;
            this.buttonMergeSort.Text = "Merge Sort";
            // 
            // buttonQuickSort
            // 
            this.buttonQuickSort.Location = new System.Drawing.Point(448, 240);
            this.buttonQuickSort.Name = "buttonQuickSort";
            this.buttonQuickSort.Size = new System.Drawing.Size(104, 24);
            this.buttonQuickSort.TabIndex = 9;
            this.buttonQuickSort.Text = "Quick Sort";
            // 
            // generateButton
            // 
            this.generateButton.Location = new System.Drawing.Point(322, 72);
            this.generateButton.Name = "generateButton";
            this.generateButton.Size = new System.Drawing.Size(75, 23);
            this.generateButton.TabIndex = 10;
            this.generateButton.Text = "Generate";
            
            
            this.ClientSize = new System.Drawing.Size(575, 363);
            this.Controls.Add(this.checkBoxGenerateNumbers);
            this.Controls.Add(this.numericUpDownMax);
            this.Controls.Add(this.textBoxInput);
            this.Controls.Add(this.textBoxOutput);
            this.Controls.Add(this.labelTime);
            this.Controls.Add(this.buttonBubbleSort);
            this.Controls.Add(this.buttonSelectionSort);
            this.Controls.Add(this.buttonInsertionSort);
            this.Controls.Add(this.buttonMergeSort);
            this.Controls.Add(this.buttonQuickSort);
            this.Controls.Add(this.generateButton);
            this.Name = "SortAlgorithmForm";
            ((System.ComponentModel.ISupportInitialize)(this.numericUpDownMax)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
    private void CheckBoxGenerateNumbers_CheckedChanged(object sender, EventArgs e)
        {
            // Zablokowanie lub odblokowanie TextBoxa do wprowadzania danych
            textBoxInput.ReadOnly = checkBoxGenerateNumbers.Checked;
            numericUpDownMax.Enabled = checkBoxGenerateNumbers.Checked;
        }

    private void GenerateButton_Click(object sender, EventArgs e)
    {
        if (checkBoxGenerateNumbers.Checked)
        {
            // Generowanie losowych liczb
            numbers = Enumerable.Range(1, (int)numericUpDownMax.Value).Select(_ => random.Next()).ToArray();
        }
        else
        {
            // Pobieranie liczb z textboxa i dzielenie ich na osobne liczby
            numbers = textBoxInput.Text.Split(' ').Select(int.Parse).ToArray();
        }
    }

    private void MethodButton_Click(object sender, EventArgs e)
        {
            stopwatch = Stopwatch.StartNew();

            if (sender == generateButton)
            {
                // Tutaj umieść kod generowania liczb
                if (checkBoxGenerateNumbers.Checked)
                {
                    // Generowanie losowych liczb
                    numbers = Enumerable.Range(1, (int)numericUpDownMax.Value).Select(_ => random.Next()).ToArray();
                }
                else
                {
                    // Pobieranie liczb z textboxa i dzielenie ich na osobne liczby
                    numbers = textBoxInput.Text.Split(' ').Select(int.Parse).ToArray();
                }
            }
            else
            {
                // Tutaj umieść kod sortowania
                if (sender == buttonBubbleSort)
                {
                    BubbleSortAlgorithm(numbers);
                }
                else if (sender == buttonSelectionSort)
                {
                    SelectionSortAlgorithm(numbers);
                }
                else if (sender == buttonInsertionSort)
                {
                    InsertSort(numbers);
                }
                else if (sender == buttonMergeSort)
                {
                    MergeSortAlgorithm(numbers);
                }
                else if (sender == buttonQuickSort)
                {
                    QuickSortAlgorithm(numbers, 0, numbers.Length - 1);
                }
            }

        stopwatch.Stop(); // Zakończenie mierzenia czasu

        // Wyświetlenie posortowanych liczb
        textBoxOutput.Text = string.Join(" ", numbers);

        // Wyświetlenie czasu wykonania
        labelTime.Text = $"Czas wykonania: {stopwatch.ElapsedMilliseconds} ms";
    }

    // Implementacje pozostałych metod sortujących

    public static void BubbleSortAlgorithm(int[] arr)
    {
        int n = arr.Length;
        bool swapped;
        for (int i = 0; i < n - 1; i++)
        {
            swapped = false;
            for (int j = 0; j < n - 1 - i; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    // Zamiana miejscami elementu arr[j] i arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }

            if (!swapped)
                break;
        }
    }

    public static void SelectionSortAlgorithm(int[] arr)
    {
        int n = arr.Length;

        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i;

            for (int j = i + 1; j < n; j++)
            {
                if (arr[j] < arr[minIndex])
                {
                    minIndex = j;
                }
            }

            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    public static void InsertSort(int[] arr)
    {
        for (int i = 1; i < arr.Length; i++)
        {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    public static void MergeSortAlgorithm(int[] arr)
    {
        MergeSort(arr, 0, arr.Length - 1);
    }

    private static void MergeSort(int[] arr, int left, int right)
    {
        if (left < right)
        {
            int middle = (left + right) / 2;

            MergeSort(arr, left, middle);
            MergeSort(arr, middle + 1, right);

            Merge(arr, left, middle, right);
        }
    }

    private static void Merge(int[] arr, int left, int middle, int right)
    {
        int n1 = middle - left + 1;
        int n2 = right - middle;

        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        for (int o = 0; o < n1; o++)
            leftArray[o] = arr[left + o];

        for (int v = 0; v < n2; v++)
            rightArray[v] = arr[middle + 1 + v];

        int k = left;
        int i = 0, j = 0;

        while (i < n1 && j < n2)
        {
            if (leftArray[i] <= rightArray[j])
            {
                arr[k] = leftArray[i];
                i++;
            }
            else
            {
                arr[k] = rightArray[j];
                j++;
            }
            k++;
        }

        while (i < n1)
        {
            arr[k] = leftArray[i];
            i++;
            k++;
        }

        while (j < n2)
        {
            arr[k] = rightArray[j];
            j++;
            k++;
        }
    }

    public void QuickSortAlgorithm(int[] array, int leftIndex, int rightIndex)
    {
        if (leftIndex < rightIndex)
        {
            int pivotIndex = Partition(array, leftIndex, rightIndex);

            if (pivotIndex > 1)
            {
                QuickSortAlgorithm(array, leftIndex, pivotIndex - 1);
            }
            if (pivotIndex + 1 < rightIndex)
            {
                QuickSortAlgorithm(array, pivotIndex + 1, rightIndex);
            }
        }
    }

    private int Partition(int[] array, int left, int right)
    {
        int pivot = array[left];
        while (true)
        {
            while (array[left] < pivot)
            {
                left++;
            }

            while (array[right] > pivot)
            {
                right--;
            }

            if (left < right)
            {
                if (array[left] == array[right]) return right;

                int temp = array[left];
                array[left] = array[right];
                array[right] = temp;
            }
            else
            {
                return right;
            }
        }
    }

    [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new SortAlgorithmForm());
        }
}
