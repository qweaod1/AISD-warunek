using System;
using System.Diagnostics;
using System.Linq;
using System.Windows.Forms;

class SortAlgorythm
{
        private int[] numbers; // Tablica przechowująca liczby
        private Stopwatch stopwatch; // Do mierzenia czasu wykonania
        private Random random = new Random(); 

        private CheckBox checkBoxGenerateNumbers;
        private NumericUpDown numericUpDownMax;
        private TextBox textBoxInput;
        private TextBox textBoxOutput;
        private Label labelTime;
        private RadioButton radioButtonBubbleSort;
        private RadioButton radioButtonSelectionSort;
        private RadioButton radioButtonInsertionSort;
        private RadioButton radioButtonMergeSort;
        private RadioButton radioButtonQuickSort;
        private Button GenerateButton;
        private Button SortButton;
        
        public Form1()
        {
            InitializeComponent();
        }

         private void GenerateButton_Click(object sender, EventArgs e)
        {
            if (checkBoxGenerateNumbers.Checked)
            {
                // Generowanie losowych liczb
                Random random = new Random();
                numbers = Enumerable.Range(1, (int)numericUpDownMax.Value).Select(_ => random.Next()).ToArray();
            }
            else
            {
                // Pobieranie liczb z textboxa i dzielenie ich na osobne liczby
                numbers = textBoxInput.Text.Split(' ').Select(int.Parse).ToArray();
            }
        }

        private void SortButton_Click(object sender, EventArgs e)
        {
            stopwatch = Stopwatch.StartNew(); // Rozpoczęcie mierzenia czasu

            if (radioButtonBubbleSort.Checked)
            {
                BubbleSort(numbers);
            }
            else if (radioButtonSelectionSort.Checked)
            {
                SelectionSort(numbers);
            }
            else if (radioButtonInsertionSort.Checked)
            {
                InsertionSort(numbers);
            }
            else if (radioButtonMergeSort.Checked)
            {
                MergeSort(numbers);
            }
            else if (radioButtonQuickSort.Checked)
            {
                QuickSort(numbers, 0, numbers.Length - 1);
            }

            stopwatch.Stop(); // Zakończenie mierzenia czasu

            // Wyświetlenie posortowanych liczb
            textBoxOutput.Text = string.Join(" ", numbers);

            // Wyświetlenie czasu wykonania
            labelTime.Text = $"Czas wykonania: {stopwatch.ElapsedMilliseconds} ms";
        }


    public static void InsertSort(int[] arr)
    {
        for (int i = 1; i < arr.Length; i++)
        {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }
    public int[] QuickSort(int[] array, int leftIndex, int rightIndex)
    {
        var i = leftIndex;
        var j = rightIndex;
        var pivot = array[leftIndex];
        while (i <= j)
        {
            while (array[i] < pivot)
            {
                i++;
            }
        
            while (array[j] > pivot)
            {
                j--;
            }
            if (i <= j)
            {
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                i++;
                j--;
            }
        }
    
        if (leftIndex < j)
            SortArray(array, leftIndex, j);
        if (i < rightIndex)
            SortArray(array, i, rightIndex);
        return array;
    }
    
    public static void Merge(int[] arr, int left, int middle, int right)
    {
        int n1 = middle - left + 1;
        int n2 = right - middle;

        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        for (int i = 0; i < n1; i++)
            leftArray[i] = arr[left + i];

        for (int j = 0; j < n2; j++)
            rightArray[j] = arr[middle + 1 + j];

        int k = left;
        int i = 0, j = 0;

        while (i < n1 && j < n2)
        {
            if (leftArray[i] <= rightArray[j])
            {
                arr[k] = leftArray[i];
                i++;
            }
            else
            {
                arr[k] = rightArray[j];
                j++;
            }
            k++;
        }

        while (i < n1)
        {
            arr[k] = leftArray[i];
            i++;
            k++;
        }

        while (j < n2)
        {
            arr[k] = rightArray[j];
            j++;
            k++;
        }
    }
    public static void SelectionSortAlgorithm(int[] arr)
        {
            int n = arr.Length;

            for (int i = 0; i < n - 1; i++)
            {
                int minIndex = i;

                for (int j = i + 1; j < n; j++)
                {
                    if (arr[j] < arr[minIndex])
                    {
                        minIndex = j;
                    }
                }

                int temp = arr[minIndex];
                arr[minIndex] = arr[i];
                arr[i] = temp;
            }
        }
    public static void BubbleSortAlgorithm(int[] arr)
    {
        int n = arr.Length;
        bool swapped;
        for (int i = 0; i < n - 1; i++)
        {
            swapped = false;
            for (int j = 0; j < n - 1 - i; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    // Zamiana miejscami elementu arr[j] i arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }

            if (!swapped)
                break;
        }
    }
    

}

