using System;
using System.Collections.Generic;
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Linq;
using System.Runtime.CompilerServices;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace WindowsFormsApp3
{

    public partial class Form1 : Form
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            throw new NotImplementedException();
        }

        void A(Wezel w)
        {
            MessageBox.Show(w.wartosc.ToString());
            foreach (var dziecko in w.dzieci)
            {
                A(dziecko);
            }
        }

        List<Wezel2> visited = new List<Wezel2>();

        void A(Wezel2 w, List<Wezel2> visited)
        {
            visited.Add(w);
            MessageBox.Show(w.wartosc.ToString());

            foreach (var somsiad in w.somsiedzi)
            {
                if (!visited.Contains(somsiad))
                    A(somsiad, visited);
            }
            visited.Clear();
        }

        void BFS(Wezel root)
        {
            Queue<Wezel> queue = new Queue<Wezel>();
            HashSet<Wezel> visited = new HashSet<Wezel>();
            queue.Enqueue(root);

            while (queue.Count > 0)
            {
                Wezel current = queue.Dequeue();

                if (!visited.Contains(current))
                {
                    MessageBox.Show(current.wartosc.ToString());
                    visited.Add(current);

                    foreach (var dziecko in current.dzieci)
                    {
                        queue.Enqueue(dziecko);
                    }
                }
            }
        }
        public static void PrintLCS(int[,] tab, string n, string m, int i, int j)
        {
            if (i == 0 || j == 0)
            {
                return;
            }

            if (n[i - 1] == m[j - 1])
            {
                PrintLCS(tab, n, m, i - 1, j - 1);
                Console.Write(n[i - 1] + " ");
            }
            else if (tab[i - 1, j] > tab[i, j - 1])
            {
                PrintLCS(tab, n, m, i - 1, j);
            }
            else
            {
                PrintLCS(tab, n, m, i, j - 1);
            }
        }

        private void TestGraphTraversals(object sender, EventArgs e)
        {

            string n = "1,2,3,4,5,1";
            string m = "3,4,1,2,1,3";

            int[,] tab = new int[n.Length + 1, m.Length + 1];


            for (int i = 1; i <= n.Length; i++)
            {
                for (int j = 1; j <= m.Length; j++)
                {
                    if (n[i - 1] == m[j - 1])
                    {
                        tab[i, j] = tab[i - 1, j - 1] + 1;
                    }
                    else
                    {
                        tab[i, j] = Math.Max(tab[i - 1, j], tab[i, j - 1]);
                    }
                }
            }
            PrintLCS(tab, n, m, n.Length, m.Length);


            Console.WriteLine("Długość najdłuższego wspólnego podciągu: " + tab[n.Length, m.Length]);


            var w1 = new Wezel(1);
            var w2 = new Wezel(2);
            var w3 = new Wezel(3);
            var w4 = new Wezel(4);
            var w5 = new Wezel(5);
            var w6 = new Wezel(6);

            w5.dzieci.Add(w2);
            w5.dzieci.Add(w1);
            w5.dzieci.Add(w3);
            w2.dzieci.Add(w4);
            w2.dzieci.Add(w6);

            MessageBox.Show("A Traversal:");
            A(w5);

            MessageBox.Show("BFS Traversal:");
            BFS(w5);

            var w1b = new Wezel2(1);
            var w2b = new Wezel2(2);
            var w3b = new Wezel2(3);
            var w4b = new Wezel2(4);
            var w5b = new Wezel2(5);
            var w6b = new Wezel2(6);
            var w7b = new Wezel2(7);

            w5b.Add(w3b);
            w3b.Add(w2b);
            w3b.Add(w4b);
            w2b.Add(w6b);
            w2b.Add(w7b);
            w7b.Add(w1b);
            w1b.Add(w5b);

            MessageBox.Show("A Traversal:");
            A(w5b, visited);
        }

        private void Button1_Click(object sender, EventArgs e)
        {
            var d = new DrzewoBinarne(5);
            d.Add(3);
            d.Add(8);

            // Example usage of Znajdz method
            int targetValue = 3;
            Wezel3 foundNode = d.Znajdz(targetValue);

            if (foundNode != null)
            {
                MessageBox.Show($"Node with value {targetValue} found!");
            }
            else
            {
                MessageBox.Show($"Node with value {targetValue} not found!");
            }
        }
    }

    public class Wezel
    {
        public int wartosc;
        public List<Wezel> dzieci = new List<Wezel>();

        public Wezel(int liczba)
        {
            this.wartosc = liczba;
        }
    }

    public class Wezel2
    {
        public int wartosc;
        public List<Wezel2> somsiedzi = new List<Wezel2>();

        public Wezel2(int liczba)
        {
            this.wartosc = liczba;
        }

        public void Add(Wezel2 w)
        {
            this.somsiedzi.Add(w);
            w.somsiedzi.Add(this);
        }
    }

    public class Wezel3
    {
        public int wartosc;
        public Wezel3 rodzic;
        public Wezel3 lewedziecko;
        public Wezel3 prawedziecko;

        public Wezel3(int liczba)
        {
            this.wartosc = liczba;
        }

        public void Add(Wezel3 w)
        {
            if (w.wartosc < this.wartosc)
            {
                if (this.lewedziecko == null)
                {
                    this.lewedziecko = w;
                    w.rodzic = this;
                }
                else
                {
                    this.lewedziecko.Add(w);
                }
            }
            else
            {
                if (this.prawedziecko == null)
                {
                    this.prawedziecko = w;
                    w.rodzic = this;
                }
                else
                {
                    this.prawedziecko.Add(w);
                }
            }
        }

        // New method Znajdz
        public Wezel3 Znajdz(int liczba)
        {
            return Znajdz(this, liczba);
        }

        private Wezel3 Znajdz(Wezel3 current, int liczba)
        {
            if (current == null || current.wartosc == liczba)
            {
                return current;
            }

            if (liczba < current.wartosc)
            {
                return Znajdz(current.lewedziecko, liczba);
            }
            else
            {
                return Znajdz(current.prawedziecko, liczba);
            }
        }
    }


    public class DrzewoBinarne
    {
        Wezel3 korzen;
        int liczbaWezlow;

        public DrzewoBinarne(int liczba)
        {
            this.korzen = new Wezel3(liczba);
            this.liczbaWezlow = 1;
        }

        public void Add(int liczba)
        {
            var dziecko = new Wezel3(liczba);
            dziecko.rodzic = this.korzen;
            this.korzen.Add(dziecko);
        }

        public Wezel3 ZnajdzMin(Wezel3 w)
        {
            while (w.lewedziecko != null)
            {
                w = w.lewedziecko;
            }
            return w;
        }

        public Wezel3 Natepnik(Wezel3 w)
        {
            if (w.prawedziecko != null)
                return this.ZnajdzMin(w.prawedziecko);
            while (w.rodzic != null)
            {
                if (w.rodzic.lewedziecko == w)
                    return w.rodzic;
                w = w.rodzic;
            }
            return null;
        }

        public Wezel3 Znajdz(int targetValue)
        {
            return Znajdz(korzen, targetValue);
        }

        private Wezel3 Znajdz(Wezel3 current, int liczba)
        {
            if (current == null || current.wartosc == liczba)
            {
                return current;
            }

            if (liczba < current.wartosc)
            {
                return Znajdz(current.lewedziecko, liczba);
            }
            else
            {
                return Znajdz(current.prawedziecko, liczba);
            }
        }

        public Wezel3 Usun(Wezel3 w)
        {
            if (w == null)
            {
                return null;
            }

            if (w.lewedziecko == null && w.prawedziecko == null)
            {
                if (w.rodzic != null)
                {
                    if (w.rodzic.lewedziecko == w)
                    {
                        w.rodzic.lewedziecko = null;
                    }
                    else if (w.rodzic.prawedziecko == w)
                    {
                        w.rodzic.prawedziecko = null;
                    }
                }
                else
                {
                    korzen = null;
                }
            }
            else if (w.lewedziecko == null)
            {
                ReplaceNode(w, w.prawedziecko);
            }
            else if (w.prawedziecko == null)
            {
                ReplaceNode(w, w.lewedziecko);
            }
            else
            {
                Wezel3 successor = ZnajdzMin(w.prawedziecko);
                w.wartosc = successor.wartosc;
                w.prawedziecko = Usun(successor);
            }

            return w;
        }
        public Wezel3 UsunGdy0Dzieci(Wezel3 w)
        {
            if (w.rodzic == null)
            {
                this.korzen = null;
                return w;
            }

            if (w.rodzic.lewedziecko == w)
                w.rodzic.lewedziecko = null;
            else
                w.rodzic.prawedziecko = null;

            w.rodzic = null;
            return w;
        }

        public Wezel3 UsunGdy1Dzieci(Wezel3 w)
        {
            Wezel3 dziecko = null;
            if (w.lewedziecko != null)
            {
                dziecko = w.lewedziecko;
                w.lewedziecko = null;
            }
            else
            {
                dziecko = w.prawedziecko;
                w.prawedziecko = null;
            }
            dziecko.rodzic = w.rodzic;
            if (w.rodzic == null)
                this.korzen = dziecko;
            else
            {
                if (w.rodzic.lewedziecko == w)
                {
                    w.rodzic.lewedziecko = dziecko;
                }
                else
                    w.rodzic.prawedziecko = dziecko;
                w.rodzic = null;
            }

            return w;
        }
        public Wezel3 UsunGdy2Dzieci(Wezel3 w)
        {
            Wezel3 zamiennik = this.Natepnik(w);
            zamiennik = this.Usun(zamiennik);


            return w;
        }

        private void ReplaceNode(Wezel3 target, Wezel3 replacement)
        {
            if (target.rodzic != null)
            {
                if (target.rodzic.lewedziecko == target)
                {
                    target.rodzic.lewedziecko = replacement;
                }
                else if (target.rodzic.prawedziecko == target)
                {
                    target.rodzic.prawedziecko = replacement;
                }
            }

            if (replacement != null)
            {
                replacement.rodzic = target.rodzic;
            }
        }

        public void Preorder()
        {
            Preorder(korzen);
        }
        void Preorder(Wezel3 root)
        {
            if (root != null)
            {
                Console.Write(root.wartosc + " ");
                Preorder(root.lewedziecko);
                Preorder(root.prawedziecko);
            }
        }

        public void Inorder()
        {
            Inorder(korzen);
        }
        void Inorder(Wezel3 root)
        {
            if (root != null)
            {
                Inorder(root.lewedziecko);
                Console.Write(root.wartosc + " ");
                Inorder(root.prawedziecko);
            }
        }
        public void Postorder()
        {
            Postorder(korzen);
        }
        void Postorder(Wezel3 root)
        {
            if (root != null)
            {
                Postorder(root.lewedziecko);
                Postorder(root.prawedziecko);
                Console.Write(root.wartosc + " ");
            }
        }

    }
    public class Krawedz
    {
        public int waga;
        public Wezel3 poczatek;
        public Wezel3 koniec;
        public Krawedz(int waga, Wezel3 poczatek, Wezel3 koniec)
        {
            this.waga = waga;
            this.poczatek = poczatek;
            this.koniec = koniec;
        }
    }
    public class Graf
    {
        public List<Wezel3> Wezly = new List<Wezel3>();
        public List<Krawedz> ListaKrawedzie = new List<Krawedz>();
        public Graf(Krawedz k)
        {
            this.ListaKrawedzie.Add(k);
            this.ListaKrawedzie = this.ListaKrawedzie.OrderBy(b => k.waga).ToList();
        }

       
        int Sprawdze(Krawedz k)
        {
            int wynik = 0;
            if (!Wezly.Contains(k.poczatek))
            {
                wynik++;
            }
            if (!Wezly.Contains(k.koniec))
            {
                wynik++;
            }
            return wynik;  
        }
        public void Add(Krawedz k)
        {
            this.ListaKrawedzie.Add(k);
            if (!this.Wezly.Contains(k.poczatek))
            {
                this.Wezly.Add(k.poczatek);
            }
            if (!this.Wezly.Contains(k.koniec))
            {
                this.Wezly.Add(k.koniec);
            }
        }
        public void Join(Graf g)
        {
            foreach (var k in g.ListaKrawedzie)
            {
                this.Add(k);
            }
        }

    }
}

