using System;
using System.Diagnostics;
using System.Linq;
using System.Windows.Forms;

class SortAlgorithmForm : Form
{
    private int[] numbers; // Tablica przechowująca liczby
    private Stopwatch stopwatch; // Do mierzenia czasu wykonania
    private Random random = new Random();

    private CheckBox checkBoxGenerateNumbers;
    private NumericUpDown numericUpDownMax;
    private TextBox textBoxInput;
    private TextBox textBoxOutput;
    private Label labelTime;
    private Button buttonBubbleSort;
    private Button buttonSelectionSort;
    private Button buttonInsertionSort;
    private Button buttonMergeSort;
    private Button buttonQuickSort;
    private Button generateButton;

    public SortAlgorithmForm()
    {
        InitializeComponent();
        numbers = new int[0];
    }


    private void InitializeComponent()
    {
        // Inicjalizacja kontrolek
        checkBoxGenerateNumbers = new CheckBox();
        numericUpDownMax = new NumericUpDown();
        textBoxInput = new TextBox();
        textBoxOutput = new TextBox();
        labelTime = new Label();
        radioButtonBubbleSort = new RadioButton();
        radioButtonSelectionSort = new RadioButton();
        radioButtonInsertionSort = new RadioButton();
        radioButtonMergeSort = new RadioButton();
        radioButtonQuickSort = new RadioButton();
        generateButton = new Button();
        sortButton = new Button();

        // Konfiguracja kontrolek
        checkBoxGenerateNumbers.Text = "Generate Random Numbers";
        checkBoxGenerateNumbers.Location = new System.Drawing.Point(10, 10);
        checkBoxGenerateNumbers.CheckedChanged += CheckBoxGenerateNumbers_CheckedChanged;

        numericUpDownMax.Minimum = 1;
        numericUpDownMax.Maximum = 2000000;
        numericUpDownMax.Location = new System.Drawing.Point(10, 40);

        textBoxInput.Multiline = true;
        textBoxInput.Size = new System.Drawing.Size(200, 50);
        textBoxInput.Location = new System.Drawing.Point(10, 70);

        textBoxOutput.Multiline = true;
        textBoxOutput.Size = new System.Drawing.Size(200, 50);
        textBoxOutput.Location = new System.Drawing.Point(10, 140);
        textBoxOutput.ReadOnly = true;

        labelTime.Text = "Czas wykonania: ";
        labelTime.Location = new System.Drawing.Point(10, 200);

        radioButtonBubbleSort.Text = "Bubble Sort";
        radioButtonBubbleSort.Location = new System.Drawing.Point(10, 240);

        radioButtonSelectionSort.Text = "Selection Sort";
        radioButtonSelectionSort.Location = new System.Drawing.Point(10, 260);

        radioButtonInsertionSort.Text = "Insertion Sort";
        radioButtonInsertionSort.Location = new System.Drawing.Point(10, 280);

        radioButtonMergeSort.Text = "Merge Sort";
        radioButtonMergeSort.Location = new System.Drawing.Point(10, 300);

        radioButtonQuickSort.Text = "Quick Sort";
        radioButtonQuickSort.Location = new System.Drawing.Point(10, 320);

        generateButton.Text = "Generate";
        generateButton.Location = new System.Drawing.Point(10, 350);
        generateButton.Click += GenerateButton_Click;

        sortButton.Text = "Sort";
        sortButton.Location = new System.Drawing.Point(100, 350);
        sortButton.Click += SortButton_Click;

        // Dodanie kontrolek do formularza
        Controls.Add(checkBoxGenerateNumbers);
        Controls.Add(numericUpDownMax);
        Controls.Add(textBoxInput);
        Controls.Add(textBoxOutput);
        Controls.Add(labelTime);
        Controls.Add(radioButtonBubbleSort);
        Controls.Add(radioButtonSelectionSort);
        Controls.Add(radioButtonInsertionSort);
        Controls.Add(radioButtonMergeSort);
        Controls.Add(radioButtonQuickSort);
        Controls.Add(generateButton);
        Controls.Add(sortButton);
    }

    private void CheckBoxGenerateNumbers_CheckedChanged(object sender, EventArgs e)
        {
            // Zablokowanie lub odblokowanie TextBoxa do wprowadzania danych
            textBoxInput.ReadOnly = checkBoxGenerateNumbers.Checked;
            numericUpDownMax.Enabled = checkBoxGenerateNumbers.Checked;
        }

    private void GenerateButton_Click(object sender, EventArgs e)
    {
        if (checkBoxGenerateNumbers.Checked)
        {
            // Generowanie losowych liczb
            numbers = Enumerable.Range(1, (int)numericUpDownMax.Value).Select(_ => random.Next()).ToArray();
        }
        else
        {
            // Pobieranie liczb z textboxa i dzielenie ich na osobne liczby
            numbers = textBoxInput.Text.Split(' ').Select(int.Parse).ToArray();
        }
    }

    private void MethodButton_Click(object sender, EventArgs e)
        {
            stopwatch = Stopwatch.StartNew();

            if (sender == generateButton)
            {
                // Tutaj umieść kod generowania liczb
                if (checkBoxGenerateNumbers.Checked)
                {
                    // Generowanie losowych liczb
                    numbers = Enumerable.Range(1, (int)numericUpDownMax.Value).Select(_ => random.Next()).ToArray();
                }
                else
                {
                    // Pobieranie liczb z textboxa i dzielenie ich na osobne liczby
                    numbers = textBoxInput.Text.Split(' ').Select(int.Parse).ToArray();
                }
            }
            else
            {
                // Tutaj umieść kod sortowania
                if (sender == buttonBubbleSort)
                {
                    BubbleSortAlgorithm(numbers);
                }
                else if (sender == buttonSelectionSort)
                {
                    SelectionSortAlgorithm(numbers);
                }
                else if (sender == buttonInsertionSort)
                {
                    InsertSort(numbers);
                }
                else if (sender == buttonMergeSort)
                {
                    MergeSortAlgorithm(numbers);
                }
                else if (sender == buttonQuickSort)
                {
                    QuickSortAlgorithm(numbers, 0, numbers.Length - 1);
                }
            }

        stopwatch.Stop(); // Zakończenie mierzenia czasu

        // Wyświetlenie posortowanych liczb
        textBoxOutput.Text = string.Join(" ", numbers);

        // Wyświetlenie czasu wykonania
        labelTime.Text = $"Czas wykonania: {stopwatch.ElapsedMilliseconds} ms";
    }

    // Implementacje pozostałych metod sortujących

    public static void BubbleSortAlgorithm(int[] arr)
    {
        int n = arr.Length;
        bool swapped;
        for (int i = 0; i < n - 1; i++)
        {
            swapped = false;
            for (int j = 0; j < n - 1 - i; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    // Zamiana miejscami elementu arr[j] i arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }

            if (!swapped)
                break;
        }
    }

    public static void SelectionSortAlgorithm(int[] arr)
    {
        int n = arr.Length;

        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i;

            for (int j = i + 1; j < n; j++)
            {
                if (arr[j] < arr[minIndex])
                {
                    minIndex = j;
                }
            }

            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    public static void InsertSort(int[] arr)
    {
        for (int i = 1; i < arr.Length; i++)
        {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    public static void MergeSortAlgorithm(int[] arr)
    {
        MergeSort(arr, 0, arr.Length - 1);
    }

    private static void MergeSort(int[] arr, int left, int right)
    {
        if (left < right)
        {
            int middle = (left + right) / 2;

            MergeSort(arr, left, middle);
            MergeSort(arr, middle + 1, right);

            Merge(arr, left, middle, right);
        }
    }

    private static void Merge(int[] arr, int left, int middle, int right)
    {
        int n1 = middle - left + 1;
        int n2 = right - middle;

        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        for (int o = 0; o < n1; o++)
            leftArray[o] = arr[left + o];

        for (int v = 0; v < n2; v++)
            rightArray[v] = arr[middle + 1 + v];

        int k = left;
        int i = 0, j = 0;

        while (i < n1 && j < n2)
        {
            if (leftArray[i] <= rightArray[j])
            {
                arr[k] = leftArray[i];
                i++;
            }
            else
            {
                arr[k] = rightArray[j];
                j++;
            }
            k++;
        }

        while (i < n1)
        {
            arr[k] = leftArray[i];
            i++;
            k++;
        }

        while (j < n2)
        {
            arr[k] = rightArray[j];
            j++;
            k++;
        }
    }

    public void QuickSortAlgorithm(int[] array, int leftIndex, int rightIndex)
    {
        if (leftIndex < rightIndex)
        {
            int pivotIndex = Partition(array, leftIndex, rightIndex);

            if (pivotIndex > 1)
            {
                QuickSortAlgorithm(array, leftIndex, pivotIndex - 1);
            }
            if (pivotIndex + 1 < rightIndex)
            {
                QuickSortAlgorithm(array, pivotIndex + 1, rightIndex);
            }
        }
    }

    private int Partition(int[] array, int left, int right)
    {
        int pivot = array[left];
        while (true)
        {
            while (array[left] < pivot)
            {
                left++;
            }

            while (array[right] > pivot)
            {
                right--;
            }

            if (left < right)
            {
                if (array[left] == array[right]) return right;

                int temp = array[left];
                array[left] = array[right];
                array[right] = temp;
            }
            else
            {
                return right;
            }
        }
    }

    [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new SortAlgorithmForm());
        }
}
